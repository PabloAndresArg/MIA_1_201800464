// Code generated by goyacc sint.y. DO NOT EDIT.

//line sint.y:2
package An

import __yyfmt__ "fmt"

//line sint.y:2

import (
	"bufio" // para esperar una entrada
	"bytes"
	"fmt"
	"os"
	"strings" // PARA HACER EL STRIM() EN LAS CADENAS
)

/*
un archivo .y esta compuesto por 4 secciones
- importes , uniones o declaraciones de tokenes , declaracion de gramatica , Segmento de codigo  para las funciones
*/

//line sint.y:19
type yySymType struct {
	yys         int
	NoTerminal  string
	str         string // DEFINO EL TIPO  DE MIS TERMINALES , EN ESTE CASO TODOS LOS QUE ESTEN EN %type<token> lo que va devolver es un tipo string
	tokenEntero int64
}

const UNMOUNT = 57346
const ID_N = 57347
const NUMERO = 57348
const REP = 57349
const CM_RUTA = 57350
const NUMERO_NEGATIVO = 57351
const VD_ID_NUMERO = 57352
const EXTENSION_DSK = 57353
const B = 57354
const E = 57355
const L = 57356
const RF = 57357
const BF = 57358
const FF = 57359
const WF = 57360
const K = 57361
const M = 57362
const CHGRP = 57363
const GRP = 57364
const PAUSE = 57365
const COMANDO_ID = 57366
const R = 57367
const CHOWN = 57368
const CP = 57369
const DEST = 57370
const FIND = 57371
const CAT = 57372
const MV = 57373
const RM = 57374
const REN = 57375
const P = 57376
const MKFILE = 57377
const MKDIR = 57378
const LOGOUT = 57379
const ID = 57380
const FILE_N = 57381
const EDIT = 57382
const MKGRP = 57383
const RMGRP = 57384
const USR = 57385
const MOUNT = 57386
const RMDISK = 57387
const FLECHA = 57388
const PATH = 57389
const ADD = 57390
const EXEC = 57391
const RUTA = 57392
const MKDISK = 57393
const SIZE = 57394
const NAME = 57395
const UNIT = 57396
const FDISK = 57397
const TYPE = 57398
const FIT = 57399
const DELETE = 57400
const fast = 57401
const full = 57402
const MKFS = 57403
const PWD = 57404
const RMUSR = 57405
const MKURS = 57406
const CHMOD = 57407
const UGO = 57408
const CONT = 57409

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"UNMOUNT",
	"ID_N",
	"NUMERO",
	"REP",
	"CM_RUTA",
	"NUMERO_NEGATIVO",
	"VD_ID_NUMERO",
	"EXTENSION_DSK",
	"B",
	"E",
	"L",
	"RF",
	"BF",
	"FF",
	"WF",
	"K",
	"M",
	"CHGRP",
	"GRP",
	"PAUSE",
	"COMANDO_ID",
	"R",
	"CHOWN",
	"CP",
	"DEST",
	"FIND",
	"CAT",
	"MV",
	"RM",
	"REN",
	"P",
	"MKFILE",
	"MKDIR",
	"LOGOUT",
	"ID",
	"FILE_N",
	"EDIT",
	"MKGRP",
	"RMGRP",
	"USR",
	"MOUNT",
	"RMDISK",
	"FLECHA",
	"PATH",
	"ADD",
	"EXEC",
	"RUTA",
	"MKDISK",
	"SIZE",
	"NAME",
	"UNIT",
	"FDISK",
	"TYPE",
	"FIT",
	"DELETE",
	"fast",
	"full",
	"MKFS",
	"PWD",
	"RMUSR",
	"MKURS",
	"CHMOD",
	"UGO",
	"CONT",
	"'-'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line sint.y:153

func leerArchivoDeEntrada(ruta string) {
	fmt.Println("")
	fmt.Println("")
	fmt.Println("							||||||||||||||||||||||||||||||||||")
	fmt.Println("							|||||| Analizando un archivo |||||")
	fmt.Println("							||||||||||||||||||||||||||||||||||")
	fmt.Println("")
	ARCHIVO, error := os.Open(QuitarComillas(ruta))
	algo_salio_mal := false
	if error != nil {
		fmt.Println("ERROR REPORTADO")
		algo_salio_mal = true
	}
	if !(algo_salio_mal) {
		yyDebug = 0
		yyErrorVerbose = true
		scanner := bufio.NewScanner(ARCHIVO)
		entrada := ""
		for scanner.Scan() {
			linea_entrada := scanner.Text()
			linea_entrada = strings.TrimSpace(linea_entrada) // 	QUITO LOS ESPACIOS A LOS LADOS
			entrada = entrada + linea_entrada
			var listo_para_analizar bool = true
			// PREGUNTA SI TIENE UN CARACTER PARA CONTINUAR CON LA SIGUIENTE LINEA
			if len(entrada) >= 2 && entrada[len(entrada)-1] == '*' && entrada[len(entrada)-2] == '\\' {
				listo_para_analizar = false // TENGO QUE CONCATENAR LA ENTRADA ANTERIOR CON LA LINEA ACTUAL
				entrada = QuitarSimboloNextLine(entrada)
			}

			if listo_para_analizar {
				fmt.Println("EJECUTANDO>> " + entrada)
				l := nuevo_lexico__(bytes.NewBufferString(entrada), os.Stdout, "file.name") // ESTA FUNCION VIENE DEL ANALIZADOR LEXICO
				yyParse(l)
				entrada = "" //limpio la entrada
			}
		}
	}
	fmt.Println("")
	fmt.Println("							...Archivo terminado de analizar...")
	fmt.Println("")
}

func AnalizarComando() {
	puntero_lector := bufio.NewReader(os.NewFile(0, "stdin"))
	yyDebug = 0
	yyErrorVerbose = true
	for { // ciclo infinito
		var entrada string
		var bandera_todo_bien bool

		fmt.Printf(">> ")
		if entrada, bandera_todo_bien = leerLineComando(puntero_lector); bandera_todo_bien {
			entrada = strings.TrimSpace(entrada)

			if len(entrada) >= 2 && entrada[len(entrada)-1] == '*' && entrada[len(entrada)-2] == '\\' {
				entrada = QuitarSimboloNextLine(entrada)
				for {
					fmt.Print("continua esa linea>>")
					temporal := ""
					temporal, bandera_todo_bien = leerLineComando(puntero_lector)
					entrada += temporal
					entrada = strings.TrimSpace(entrada)
					if entrada[len(entrada)-1] != '*' && entrada[len(entrada)-2] != '\\' {
						break
					} else {
						entrada = QuitarSimboloNextLine(entrada)
					}
				}

			}
			l := nuevo_lexico__(bytes.NewBufferString(entrada), os.Stdout, "archivo.PabloAndres") // ESTA FUNCION VIENE DEL ANALIZADOR LEXICO
			yyParse(l)
		} else {
			break
		}
	}
}

func leerLineComando(puntero_lector *bufio.Reader) (string, bool) {
	salida, err := puntero_lector.ReadString('\n')
	if err != nil {
		return "", false
	}
	return salida, true
}

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
}

const yyPrivate = 57344

const yyLast = 134

var yyAct = [...]int{
	107, 119, 104, 17, 37, 31, 16, 28, 26, 22,
	23, 19, 120, 121, 47, 53, 106, 68, 61, 46,
	48, 49, 8, 50, 51, 52, 41, 127, 105, 55,
	124, 40, 42, 43, 60, 56, 103, 101, 96, 94,
	93, 66, 44, 15, 13, 38, 92, 67, 2, 65,
	12, 91, 90, 88, 14, 87, 33, 59, 86, 85,
	18, 84, 83, 58, 82, 81, 80, 79, 78, 77,
	76, 75, 74, 73, 72, 71, 70, 69, 63, 129,
	126, 113, 114, 36, 30, 27, 25, 125, 110, 62,
	99, 100, 130, 133, 21, 108, 109, 116, 117, 118,
	97, 134, 112, 131, 128, 122, 132, 102, 123, 95,
	89, 45, 34, 54, 57, 39, 24, 35, 32, 64,
	111, 6, 20, 5, 98, 4, 3, 7, 115, 1,
	9, 29, 10, 11,
}

var yyPact = [...]int{
	-1, -1000, -57, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -59, -58, -60, -61, -63, 107, -64, -2,
	-59, -1000, -21, -5, -60, -1000, -33, -61, -18, -63,
	-1000, 10, 107, -1000, 32, -64, -1000, -7, 31, -1000,
	30, 29, 28, 27, 26, -1000, 25, 24, 23, 22,
	21, 20, 19, 18, -1000, 16, 15, -1000, 13, 12,
	9, 7, -1000, 100, -1000, 6, 5, 0, -6, -11,
	103, -12, 89, 71, -13, 101, -14, -22, 76, 68,
	81, -47, 99, -20, -22, 42, -23, 94, 41, -1000,
	-47, 97, 76, 91, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000,
}

var yyPgo = [...]int{
	0, 133, 83, 132, 131, 86, 130, 129, 128, 127,
	2, 126, 125, 124, 123, 122, 94, 121, 0, 120,
	1, 84, 118, 56, 85, 117, 116,
}

var yyR1 = [...]int{
	0, 7, 7, 7, 11, 11, 11, 11, 11, 11,
	11, 11, 3, 22, 22, 23, 9, 9, 24, 24,
	1, 25, 25, 2, 2, 2, 2, 2, 14, 12,
	15, 15, 16, 16, 16, 16, 13, 13, 18, 18,
	18, 17, 26, 26, 5, 5, 5, 5, 5, 5,
	5, 5, 5, 20, 20, 8, 8, 8, 19, 19,
	19, 10, 10, 6, 4, 4, 21, 21, 21, 21,
}

var yyR2 = [...]int{
	0, 0, 5, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 1, 3, 3, 1, 4, 4,
	2, 2, 1, 4, 4, 4, 4, 4, 5, 2,
	2, 1, 4, 4, 4, 4, 1, 1, 1, 1,
	1, 2, 2, 1, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 2, 1, 4, 4, 4, 4,
}

var yyChk = [...]int{
	-1000, -7, 49, -11, -12, -14, -17, -9, 23, -6,
	-3, -1, 51, 45, 55, 44, 7, 4, 61, 68,
	-15, -16, 68, 68, -26, -5, 68, -24, 68, -4,
	-21, 68, -22, -23, 5, -25, -2, 68, 47, -16,
	52, 47, 53, 54, 47, -5, 52, 47, 53, 54,
	56, 57, 58, 48, -24, 47, 53, -21, 53, 47,
	24, 8, -23, 46, -2, 56, 48, 54, 24, 46,
	46, 46, 46, 46, 46, 46, 46, 46, 46, 46,
	46, 46, 46, 46, 46, 46, 46, 46, 46, 10,
	46, 46, 46, 46, 50, 6, 50, 11, -13, 19,
	20, 50, 6, 50, -10, 50, 38, -18, 19, 20,
	12, -19, 34, 13, 14, -8, 16, 17, 18, -20,
	59, 60, 6, 9, 50, -10, 38, 50, 10, 38,
	-20, 6, 9, -18, 10,
}

var yyDef = [...]int{
	1, -2, 0, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 0, 0, 0, 17, 0, 0, 0, 0,
	29, 31, 0, 0, 41, 43, 0, 0, 0, 63,
	65, 0, 12, 14, 0, 20, 22, 0, 0, 30,
	0, 0, 0, 0, 0, 42, 0, 0, 0, 0,
	0, 0, 0, 0, 16, 0, 0, 64, 0, 0,
	0, 0, 13, 0, 21, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 15,
	0, 0, 0, 0, 2, 32, 33, 34, 35, 36,
	37, 28, 44, 45, 46, 61, 62, 47, 38, 39,
	40, 48, 58, 59, 60, 49, 55, 56, 57, 50,
	53, 54, 51, 52, 18, 19, 66, 67, 68, 69,
	23, 24, 25, 26, 27,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 68,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67,
}

var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sint.y:39
		{
		}
	case 2:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sint.y:40
		{
			leerArchivoDeEntrada(yyDollar[5].str)
		}
	case 8:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sint.y:48
		{
			pausar_()
		}
	case 12:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sint.y:55
		{ /*NO HACE NADA PORQUE LO HAGO CADA QUE RECIBE UNA PRODUCCION ABAJO :v */
		}
	case 15:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sint.y:59
		{
			desmontar(yyDollar[3].str)
		}
	case 16:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sint.y:62
		{
			crearMontaje(QuitarComillas(Path_), QuitarComillas(Name_))
		}
	case 17:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sint.y:63
		{
			mostrarMounts()
		}
	case 18:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sint.y:65
		{
			Path_ = yyDollar[4].str
		}
	case 19:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sint.y:66
		{
			Name_ = yyDollar[4].NoTerminal
		}
	case 20:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sint.y:68
		{
			metodoMKFS(Id_vdlentraNumero_, type_, add_, Unit_k_)
		}
	case 23:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sint.y:73
		{
			type_ = yyDollar[4].NoTerminal
		}
	case 24:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sint.y:74
		{
			add_ = yyDollar[4].str
		}
	case 25:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sint.y:75
		{
			add_ = yyDollar[4].str
		}
	case 26:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sint.y:76
		{
			Unit_k_ = yyDollar[4].NoTerminal
		}
	case 27:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sint.y:77
		{
			Id_vdlentraNumero_ = yyDollar[4].str
		}
	case 28:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sint.y:80
		{
			EliminarDisco(yyDollar[5].str)
		}
	case 29:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sint.y:82
		{
			CrearDisco(Size_, Path_, Name_, Unit_m_)
		}
	case 32:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sint.y:87
		{
			Size_ = yyDollar[4].str
		}
	case 33:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sint.y:88
		{
			Path_ = yyDollar[4].str
		}
	case 34:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sint.y:89
		{
			Name_ = yyDollar[4].str
		}
	case 35:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sint.y:90
		{
			Unit_m_ = yyDollar[4].NoTerminal
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sint.y:95
		{
			yyVAL.NoTerminal = yyDollar[1].str
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sint.y:96
		{
			yyVAL.NoTerminal = yyDollar[1].str
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sint.y:99
		{
			yyVAL.NoTerminal = yyDollar[1].str
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sint.y:100
		{
			yyVAL.NoTerminal = yyDollar[1].str
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sint.y:101
		{
			yyVAL.NoTerminal = yyDollar[1].str
		}
	case 41:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sint.y:105
		{
			MetodosParticiones(Path_, Name_, Size_, FIT_, OPCION_DELETE_, add_, tipo_particion_, Unit_k_)
		}
	case 44:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sint.y:111
		{
			Size_ = yyDollar[4].str
		}
	case 45:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sint.y:112
		{
			Path_ = yyDollar[4].str
		}
	case 46:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sint.y:113
		{
			Name_ = yyDollar[4].NoTerminal
		}
	case 47:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sint.y:114
		{
			Unit_k_ = yyDollar[4].NoTerminal
		}
	case 48:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sint.y:115
		{
			tipo_particion_ = yyDollar[4].NoTerminal
		}
	case 49:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sint.y:116
		{
			FIT_ = yyDollar[4].NoTerminal
		}
	case 50:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sint.y:117
		{
			OPCION_DELETE_ = yyDollar[4].NoTerminal
		}
	case 51:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sint.y:118
		{
			add_ = yyDollar[4].str
		}
	case 52:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sint.y:119
		{
			add_ = yyDollar[4].str
		}
	case 53:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sint.y:122
		{
			yyVAL.NoTerminal = yyDollar[1].str
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sint.y:123
		{
			yyVAL.NoTerminal = yyDollar[1].str
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sint.y:126
		{
			yyVAL.NoTerminal = yyDollar[1].str
		}
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sint.y:127
		{
			yyVAL.NoTerminal = yyDollar[1].str
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sint.y:128
		{
			yyVAL.NoTerminal = yyDollar[1].str
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sint.y:131
		{
			yyVAL.NoTerminal = yyDollar[1].str
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sint.y:132
		{
			yyVAL.NoTerminal = yyDollar[1].str
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sint.y:133
		{
			yyVAL.NoTerminal = yyDollar[1].str
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sint.y:137
		{
			yyVAL.NoTerminal = QuitarComillas(yyDollar[1].str)
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sint.y:138
		{
			yyVAL.NoTerminal = QuitarComillas(yyDollar[1].str)
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sint.y:140
		{
			generarReporte()
		}
	case 66:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sint.y:145
		{
			Name_ = yyDollar[4].str
		}
	case 67:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sint.y:146
		{
			Path_ = QuitarComillas(yyDollar[4].str)
		}
	case 68:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sint.y:147
		{
			Id_vdlentraNumero_ = yyDollar[4].str
		}
	case 69:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sint.y:148
		{
			Commando_Ruta_ = yyDollar[4].str /*aun no se usara*/
		}
	}
	goto yystack /* stack new state and value */
}
