// Code generated by golex. DO NOT EDIT.

package An

import (
	"bufio"
	"go/token"
	"modernc.org/golex/lex"

	"io"
	"unicode"
)

type lexer struct {
	*lex.Lexer
}

// propio de lex
const (
	classUnicodeLeter = iota + 0x80
	classUnicodeDigit
	classOther
)

func miniLexico(caracter rune) int {
	if caracter >= 0 && caracter < 0x80 {
		return int(caracter)
	}
	if unicode.IsLetter(caracter) {
		return classUnicodeLeter
	}
	if unicode.IsDigit(caracter) {
		return classUnicodeDigit
	}
	return classOther
}

func nuevo_lexico__(Fuente_ io.Reader, destino_ io.Writer, fName string) *lexer {
	file := token.NewFileSet().AddFile(fName, -1, 1<<31-1)
	lexic_, err := lex.New(file, bufio.NewReader(Fuente_), lex.RuneClass(miniLexico))
	if err != nil {
		panic(err)
	}
	return &lexer{lexic_}
	// necesaria para el sintactico :D
}

func (l *lexer) Lex(lval *yySymType) int {
	c := l.Enter()

yystate0:
	yyrule := -1
	_ = yyrule
	c = l.Rule0()

	goto yystart1

yyAction:
	switch yyrule {
	case 1:
		goto yyrule1
	case 2:
		goto yyrule2
	case 3:
		goto yyrule3
	case 4:
		goto yyrule4
	case 5:
		goto yyrule5
	case 6:
		goto yyrule6
	case 7:
		goto yyrule7
	case 8:
		goto yyrule8
	}
yystate1:
	c = l.Next()
yystart1:
	switch {
	default:
		goto yyabort
	case c == '&':
		goto yystate3
	case c == '-':
		goto yystate5
	case c == 'M' || c == 'm':
		goto yystate9
	case c == 'P' || c == 'p':
		goto yystate14
	case c == 'S' || c == 's':
		goto yystate18
	case c == '\t' || c == '\n' || c == '\r' || c == ' ':
		goto yystate2
	case c >= '0' && c <= '9' || c == '\u0081':
		goto yystate7
	case c >= 'A' && c <= 'L' || c == 'N' || c == 'O' || c == 'Q' || c == 'R' || c >= 'T' && c <= 'Z' || c == '_' || c >= 'a' && c <= 'l' || c == 'n' || c == 'o' || c == 'q' || c == 'r' || c >= 't' && c <= 'z' || c == '\u0080':
		goto yystate8
	}

yystate2:
	c = l.Next()
	yyrule = 1
	l.Mark()
	switch {
	default:
		goto yyrule1
	case c == '\t' || c == '\n' || c == '\r' || c == ' ':
		goto yystate2
	}

yystate3:
	c = l.Next()
	switch {
	default:
		goto yyabort
	case c == '&':
		goto yystate4
	}

yystate4:
	c = l.Next()
	yyrule = 7
	l.Mark()
	goto yyrule7

yystate5:
	c = l.Next()
	switch {
	default:
		goto yyabort
	case c == '>':
		goto yystate6
	}

yystate6:
	c = l.Next()
	yyrule = 2
	l.Mark()
	goto yyrule2

yystate7:
	c = l.Next()
	yyrule = 8
	l.Mark()
	goto yyrule8

yystate8:
	c = l.Next()
	yyrule = 6
	l.Mark()
	switch {
	default:
		goto yyrule6
	case c >= '0' && c <= '9' || c >= 'A' && c <= 'Z' || c == '_' || c >= 'a' && c <= 'z' || c == '\u0080' || c == '\u0081':
		goto yystate8
	}

yystate9:
	c = l.Next()
	yyrule = 6
	l.Mark()
	switch {
	default:
		goto yyrule6
	case c == 'O' || c == 'o':
		goto yystate10
	case c >= '0' && c <= '9' || c >= 'A' && c <= 'N' || c >= 'P' && c <= 'Z' || c == '_' || c >= 'a' && c <= 'n' || c >= 'p' && c <= 'z' || c == '\u0080' || c == '\u0081':
		goto yystate8
	}

yystate10:
	c = l.Next()
	yyrule = 6
	l.Mark()
	switch {
	default:
		goto yyrule6
	case c == 'U' || c == 'u':
		goto yystate11
	case c >= '0' && c <= '9' || c >= 'A' && c <= 'T' || c >= 'V' && c <= 'Z' || c == '_' || c >= 'a' && c <= 't' || c >= 'v' && c <= 'z' || c == '\u0080' || c == '\u0081':
		goto yystate8
	}

yystate11:
	c = l.Next()
	yyrule = 6
	l.Mark()
	switch {
	default:
		goto yyrule6
	case c == 'N' || c == 'n':
		goto yystate12
	case c >= '0' && c <= '9' || c >= 'A' && c <= 'M' || c >= 'O' && c <= 'Z' || c == '_' || c >= 'a' && c <= 'm' || c >= 'o' && c <= 'z' || c == '\u0080' || c == '\u0081':
		goto yystate8
	}

yystate12:
	c = l.Next()
	yyrule = 6
	l.Mark()
	switch {
	default:
		goto yyrule6
	case c == 'T' || c == 't':
		goto yystate13
	case c >= '0' && c <= '9' || c >= 'A' && c <= 'S' || c >= 'U' && c <= 'Z' || c == '_' || c >= 'a' && c <= 's' || c >= 'u' && c <= 'z' || c == '\u0080' || c == '\u0081':
		goto yystate8
	}

yystate13:
	c = l.Next()
	yyrule = 3
	l.Mark()
	switch {
	default:
		goto yyrule3
	case c >= '0' && c <= '9' || c >= 'A' && c <= 'Z' || c == '_' || c >= 'a' && c <= 'z' || c == '\u0080' || c == '\u0081':
		goto yystate8
	}

yystate14:
	c = l.Next()
	yyrule = 6
	l.Mark()
	switch {
	default:
		goto yyrule6
	case c == 'A' || c == 'a':
		goto yystate15
	case c >= '0' && c <= '9' || c >= 'B' && c <= 'Z' || c == '_' || c >= 'b' && c <= 'z' || c == '\u0080' || c == '\u0081':
		goto yystate8
	}

yystate15:
	c = l.Next()
	yyrule = 6
	l.Mark()
	switch {
	default:
		goto yyrule6
	case c == 'T' || c == 't':
		goto yystate16
	case c >= '0' && c <= '9' || c >= 'A' && c <= 'S' || c >= 'U' && c <= 'Z' || c == '_' || c >= 'a' && c <= 's' || c >= 'u' && c <= 'z' || c == '\u0080' || c == '\u0081':
		goto yystate8
	}

yystate16:
	c = l.Next()
	yyrule = 6
	l.Mark()
	switch {
	default:
		goto yyrule6
	case c == 'H' || c == 'h':
		goto yystate17
	case c >= '0' && c <= '9' || c >= 'A' && c <= 'G' || c >= 'I' && c <= 'Z' || c == '_' || c >= 'a' && c <= 'g' || c >= 'i' && c <= 'z' || c == '\u0080' || c == '\u0081':
		goto yystate8
	}

yystate17:
	c = l.Next()
	yyrule = 4
	l.Mark()
	switch {
	default:
		goto yyrule4
	case c >= '0' && c <= '9' || c >= 'A' && c <= 'Z' || c == '_' || c >= 'a' && c <= 'z' || c == '\u0080' || c == '\u0081':
		goto yystate8
	}

yystate18:
	c = l.Next()
	yyrule = 6
	l.Mark()
	switch {
	default:
		goto yyrule6
	case c == 'K' || c == 'k':
		goto yystate19
	case c >= '0' && c <= '9' || c >= 'A' && c <= 'J' || c >= 'L' && c <= 'Z' || c == '_' || c >= 'a' && c <= 'j' || c >= 'l' && c <= 'z' || c == '\u0080' || c == '\u0081':
		goto yystate8
	}

yystate19:
	c = l.Next()
	yyrule = 6
	l.Mark()
	switch {
	default:
		goto yyrule6
	case c == 'D' || c == 'd':
		goto yystate20
	case c >= '0' && c <= '9' || c >= 'A' && c <= 'C' || c >= 'E' && c <= 'Z' || c == '_' || c >= 'a' && c <= 'c' || c >= 'e' && c <= 'z' || c == '\u0080' || c == '\u0081':
		goto yystate8
	}

yystate20:
	c = l.Next()
	yyrule = 6
	l.Mark()
	switch {
	default:
		goto yyrule6
	case c == 'I' || c == 'i':
		goto yystate21
	case c >= '0' && c <= '9' || c >= 'A' && c <= 'H' || c >= 'J' && c <= 'Z' || c == '_' || c >= 'a' && c <= 'h' || c >= 'j' && c <= 'z' || c == '\u0080' || c == '\u0081':
		goto yystate8
	}

yystate21:
	c = l.Next()
	yyrule = 6
	l.Mark()
	switch {
	default:
		goto yyrule6
	case c == 'R' || c == 'r':
		goto yystate22
	case c >= '0' && c <= '9' || c >= 'A' && c <= 'Q' || c >= 'S' && c <= 'Z' || c == '_' || c >= 'a' && c <= 'q' || c >= 's' && c <= 'z' || c == '\u0080' || c == '\u0081':
		goto yystate8
	}

yystate22:
	c = l.Next()
	yyrule = 5
	l.Mark()
	switch {
	default:
		goto yyrule5
	case c >= '0' && c <= '9' || c >= 'A' && c <= 'Z' || c == '_' || c >= 'a' && c <= 'z' || c == '\u0080' || c == '\u0081':
		goto yystate8
	}

yyrule1: // [ \t\r\n]+

	goto yystate0
yyrule2: // {flecha}
	{
		lval.token = string(l.TokenBytes(nil))
		return FLECHA
		goto yystate0
	}
yyrule3: // mount
	{
		lval.token = string(l.TokenBytes(nil))
		return MOUNT
		goto yystate0
	}
yyrule4: // path
	{
		lval.token = string(l.TokenBytes(nil))
		return PATH
		goto yystate0
	}
yyrule5: // skdir
	{
		lval.token = string(l.TokenBytes(nil))
		return SKDIR
		goto yystate0
	}
yyrule6: // {id}
	{
		lval.token = string(l.TokenBytes(nil))
		return ID
		goto yystate0
	}
yyrule7: // {and}
	{
		lval.token = string(l.TokenBytes(nil))
		return AND
		goto yystate0
	}
yyrule8: // {digit}
	if true { // avoid go vet determining the below panic will not be reached
		lval.token = string(l.TokenBytes(nil))
		return NUMERO
		goto yystate0
	}
	panic("unreachable")

yyabort: // no lexem recognized
	//
	// silence unused label errors for build and satisfy go vet reachability analysis
	//
	{
		if false {
			goto yyabort
		}
		if false {
			goto yystate0
		}
		if false {
			goto yystate1
		}
	}

	if u_u, nitido := l.Abort(); nitido {
		return int(u_u)
	}
	goto yyAction
}
