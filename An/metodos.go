// Code generated by PABLO. DO NOT EDIT.

package An

import (
	"fmt"
	"log"
	"os"
	"strconv"
)

// LAS FUNCIONES DE ESTE ARCHIVO ESTAN COMPARTIDAS PORQUE PERTENECEN AL MISMO PACKAGE , siempre deben de iniciar con MAYUSCULA el nombre del metodo para ser exportado

// QuitarComillas: igual para la declaracion de variables MAYUSCULA AL INICIO para usar ne otras partes

func init() {
	// es una funcion especial que permite iniciazar variables o estructuras
}

//quita \* de continuacion de linea
func QuitarSimboloNextLine(cadena string) string {
	salida := ""
	for i := 0; i < len(cadena); i++ {
		if (i != len(cadena)-2) && (i != len(cadena)-1) {
			salida += string(cadena[i])
		}
	}
	return salida
}

// QuitarComillas lo que hace es quitar comillas xd
func QuitarComillas(ruta string) string {

	salida := ""
	if ruta[0] == '"' {
		//fmt.Println("tiene comillas")
		for i := 0; i < len(ruta); i++ {
			if i != 0 && (i != len(ruta)-1) {
				salida += string(ruta[i])
			}

		}
		//fmt.Println("SALIDA: " + salida)
	} else {
		salida = ruta
	}
	return salida
}

func CrearDisco(numero string, ruta string, nombre string, K_o_M string) {
	ruta = QuitarComillas(ruta)
	tamanio, _ := strconv.ParseInt(numero, 10, 64)
	//	fmt.Printf("%v\n", tamanio)

	size := int64(0)
	if K_o_M == "K" || K_o_M == "k" {
		size = int64(tamanio * 1024)
	} else { // SINO SON MEGABYTES
		size = int64(tamanio * 1024 * 1024)
	}
	rutaCompleta := ruta + nombre
	fichero, err := os.Create(rutaCompleta)
	if err != nil {
		log.Fatal("fallo creando el archivo de salida")
	}

	_, err = fichero.Seek(size-1, 0)

	if err != nil {
		log.Fatal("FALLO EN SEEK")
	}
	_, err = fichero.Write([]byte{0})
	if err != nil {
		log.Fatal("write")
	}
	err = fichero.Close()
	if err != nil {
		log.Fatal("ERROR AL CEERAR EL PROGRAMA ")
	}
}

// elimina un disco duro o archivo
func EliminarDisco(ruta_absoluta string) {
	ruta_absoluta = QuitarComillas(ruta_absoluta)
	fmt.Println("Â¿ESTA SEGURO DE QUERER ELIMINAR ESTE DISCO? ")
	fmt.Print("Presione 1 para confirmar, dsino presione 0")
	var decision int
	fmt.Scanln(&decision)
	if decision == 1 {
		erro := os.Remove(ruta_absoluta)
		if erro == nil {
			fmt.Println("Disco eliminado...")
		} else {
			fmt.Printf("ERROR , NO SE PUEDO ELIMINAR EL DISCO: %v\n", erro)
		}
	}
}
